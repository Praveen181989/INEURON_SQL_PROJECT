---TASK 

CREATE DATABASE INEURON_SQL_TASK_2;;
USE DATABASE INEURON_SQL_TASK_1;

CREATE TABLE SHIPPING_HISTORY(
PRODUCT VARCHAR NOT NULL,
QUANTITY INTEGER NOT NULL,
UNIT_PRICE INTEGER NOT NULL
);

INSERT INTO SHIPPING_HISTORY(PRODUCT, QUANTITY, UNIT_PRICE) VALUES('MILK', 3, 10),
INSERT INTO SHIPPING_HISTORY(PRODUCT, QUANTITY, UNIT_PRICE) VALUES('BREAD', 7, 3),
INSERT INTO SHIPPING_HISTORY(PRODUCT, QUANTITY, UNIT_PRICE) VALUES('BREAD', 5, 2);

SELECT * FROM SHIPPING_HISTORY;

SELECT PRODUCT, SUM(QUANTITY*UNIT_PRICE) AS TOTAL_PRICE FROM SHIPPING_HISTORY GROUP BY PRODUCT;



---TASK 2

CREATE DATABASE INEURON_SQL_TASK_2;
USE DATABASE INEURON_SQL_TASK_2;

---QUESTION 1

CREATE TABLE PHONE(
NAME VARCHAR NOT NULL UNIQUE,
PHONE_NUMBER VARCHAR NOT NULL UNIQUE);

INSERT INTO PHONE(NAME, PHONE_NUMBER) VALUES('JACK', 1234),
INSERT INTO PHONE(NAME, PHONE_NUMBER) VALUES('LENA', 3333),
INSERT INTO PHONE(NAME, PHONE_NUMBER) VALUES('MARK', 9999),
INSERT INTO PHONE(NAME, PHONE_NUMBER) VALUES('ANNA', 7582);

SELECT * FROM PHONE;

CREATE TABLE CALLS(
ID INTEGER NOT NULL,
CALLER VARCHAR NOT NULL,
CALLEE VARCHAR NOT NULL,
DURATION INTEGER NOT NULL);

INSERT INTO CALLS(ID, CALLER, CALLEE, DURATION) VALUES(25, 1234, 7582, 8),
INSERT INTO CALLS(ID, CALLER, CALLEE, DURATION) VALUES(7, 9999, 7582, 1),
INSERT INTO CALLS(ID, CALLER, CALLEE, DURATION) VALUES(18, 9999, 3333, 4),
INSERT INTO CALLS(ID, CALLER, CALLEE, DURATION) VALUES(2, 7582, 3333, 3),
INSERT INTO CALLS(ID, CALLER, CALLEE, DURATION) VALUES(3, 3333, 1234, 1),
INSERT INTO CALLS(ID, CALLER, CALLEE, DURATION) VALUES(21, 3333, 1234, 1);

SELECT * FROM CALLS;


WITH CALL_DURATION AS (
SELECT CALLER AS PHONE_NUMBER, SUM(DURATION) AS DURATION FROM CALLS GROUP BY CALLER
UNION ALL
SELECT CALLEE AS PHONE_NUMBER, SUM(DURATION) AS DURATION FROM CALLS GROUP BY CALLEE
)
SELECT NAME
FROM PHONE P JOIN CALL_DURATION CD ON CD.PHONE_NUMBER = P.PHONE_NUMBER
GROUP BY NAME
HAVING SUM(DURATION) >= 10
ORDER BY NAME;


---QUESTION 2
CREATE TABLE PHONES(
NAME VARCHAR NOT NULL UNIQUE,
PHONE_NUMBER VARCHAR NOT NULL UNIQUE);

INSERT INTO PHONES(NAME, PHONE_NUMBER) VALUES('JACK', 6356),
INSERT INTO PHONES(NAME, PHONE_NUMBER) VALUES('ADDISON', 4315),
INSERT INTO PHONES(NAME, PHONE_NUMBER) VALUES('KATE', 8003),
INSERT INTO PHONES(NAME, PHONE_NUMBER) VALUES('GINNY', 9831);

SELECT * FROM PHONES;

CREATE TABLE CALLES(
ID INTEGER NOT NULL,
CALLER VARCHAR NOT NULL,
CALLEE VARCHAR NOT NULL,
DURATION INTEGER NOT NULL);

INSERT INTO CALLES(ID, CALLER, CALLEE, DURATION) VALUES(65, 8003, 9831, 7),
INSERT INTO CALLES(ID, CALLER, CALLEE, DURATION) VALUES(100, 9831, 8003, 3),
INSERT INTO CALLES(ID, CALLER, CALLEE, DURATION) VALUES(145, 4315, 9831, 18);


SELECT * FROM CALLES;

WITH CALL_DURATION AS (
SELECT CALLER AS PHONE_NUMBER, SUM(DURATION) AS DURATION FROM CALLES GROUP BY CALLER
UNION ALL
SELECT CALLEE AS PHONE_NUMBER, SUM(DURATION) AS DURATION FROM CALLES GROUP BY CALLEE
)
SELECT NAME
FROM PHONES P JOIN CALL_DURATION CD ON CD.PHONE_NUMBER = P.PHONE_NUMBER
GROUP BY NAME
HAVING SUM(DURATION) >= 10
ORDER BY NAME;

---TASK 3

CREATE DATABASE INEURON_SQL_TASK_3;
USE DATABASE INEURON_SQL_TASK_3;

---QUESTION 1

CREATE TABLE TRANSACTIONS(
AMOUNT INTEGER NOT NULL,
DATE DATE NOT NULL
);

INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(1000, '2020-01-06'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-10, '2020-01-14'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-75, '2020-01-20'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-5, '2020-01-25'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-4, '2020-01-29'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(2000, '2020-03-10'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-75, '2020-03-12'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-20, '2020-03-15'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(40, '2020-03-15'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-50, '2020-03-17'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(200, '2020-10-10'),
INSERT INTO TRANSACTIONS(AMOUNT, DATE) VALUES(-200, '2020-10-10');

SELECT * FROM TRANSACTIONS;

SELECT (SELECT SUM(AMOUNT) FROM TRANSACTIONS) -
(SELECT
  SUM(
    CASE 
      WHEN USAGE.AMOUNT_S > 100
        OR USAGE.EVENT_C > 3
        THEN 0 
      ELSE 5
    END
  ) AS YEAR_FEE
FROM (SELECT 1 AS month UNION
      SELECT 2 UNION
      SELECT 3 UNION
      SELECT 4 UNION
      SELECT 5 UNION
      SELECT 6 UNION
      SELECT 7 UNION
      SELECT 8 UNION
      SELECT 9 UNION
      SELECT 10 UNION
      SELECT 11 UNION
      SELECT 12
) months
  LEFT OUTER JOIN
 (
  SELECT 
    sum(amount) AS amount_s,
    count(1) event_c,
    date_part('month', date) AS month
  FROM transactions
  WHERE amount < 0
  GROUP BY month
) usage ON months.month = usage.month) AS BALANCE FROM TRANSACTIONS;


---QUESTION 2

CREATE TABLE TRANSACTIONSS(
AMOUNT INTEGER NOT NULL,
DATE DATE NOT NULL
);

INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(1, '2020-06-29'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(35, '2020-02-20'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-50, '2020-02-03'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-1, '2020-02-26'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-200, '2020-08-01'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-44, '2020-02-07'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-5, '2020-02-25'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(1, '2020-06-29'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(1, '2020-06-29'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-100, '2020-12-29'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-100, '2020-12-30'),
INSERT INTO TRANSACTIONSS(AMOUNT, DATE) VALUES(-100, '2020-12-31');

SELECT * FROM TRANSACTIONSS;


SELECT (SELECT SUM(AMOUNT) FROM TRANSACTIONSS) -
(SELECT
  SUM(
    CASE 
      WHEN USAGE.AMOUNT_S > 100
        OR USAGE.EVENT_C > 3
        THEN 0 
      ELSE 5
    END
  ) AS YEAR_FEE
FROM (SELECT 1 AS month UNION ALL
      SELECT 2 UNION ALL
      SELECT 3 UNION ALL
      SELECT 4 UNION ALL
      SELECT 5 UNION ALL
      SELECT 6 UNION ALL
      SELECT 7 UNION ALL
      SELECT 8 UNION ALL
      SELECT 9 UNION ALL
      SELECT 10 UNION ALL
      SELECT 11 UNION ALL
      SELECT 12
) months
  LEFT OUTER JOIN
 (
  SELECT 
    sum(amount) AS amount_s,
    count(1) event_c,
    date_part('month', date) AS month
  FROM transactions
  WHERE amount < 0
  GROUP BY month
) usage ON months.month = usage.month) AS BALANCE FROM TRANSACTIONSS;


---QUESTION 3

CREATE TABLE TRANSACTIONSSS(
AMOUNT INTEGER NOT NULL,
DATE DATE NOT NULL
);

INSERT INTO TRANSACTIONSSS(AMOUNT, DATE) VALUES(6000, '2020-04-03'),
INSERT INTO TRANSACTIONSSS(AMOUNT, DATE) VALUES(5000, '2020-04-02'),
INSERT INTO TRANSACTIONSSS(AMOUNT, DATE) VALUES(4000, '2020-04-01'),
INSERT INTO TRANSACTIONSSS(AMOUNT, DATE) VALUES(3000, '2020-03-01'),
INSERT INTO TRANSACTIONSSS(AMOUNT, DATE) VALUES(2000, '2020-02-01'),
INSERT INTO TRANSACTIONSSS(AMOUNT, DATE) VALUES(1000, '2020-01-01');

SELECT * FROM TRANSACTIONSSS;


SELECT (SELECT SUM(AMOUNT) FROM TRANSACTIONSSS) -
(SELECT
  SUM(
    CASE 
      WHEN USAGE.AMOUNT_S > 100
        OR USAGE.EVENT_C > 3
        THEN 0 
      ELSE 5
    END
  ) AS YEAR_FEE
FROM (SELECT 1 AS month UNION ALL
      SELECT 2 UNION ALL
      SELECT 3 UNION ALL
      SELECT 4 UNION ALL
      SELECT 5 UNION ALL
      SELECT 6 UNION ALL
      SELECT 7 UNION ALL
      SELECT 8 UNION ALL
      SELECT 9 UNION ALL
      SELECT 10 UNION ALL
      SELECT 11 UNION ALL
      SELECT 12
) months
  LEFT OUTER JOIN
 (
  SELECT 
    sum(amount) AS amount_s,
    count(1) event_c,
    date_part('month', date) AS month
  FROM transactions
  WHERE amount < 0
  GROUP BY month
) usage ON months.month = usage.month) AS BALANCE FROM TRANSACTIONSSS;










